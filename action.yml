name: Build template for krux-installer
description: 'Build template for krux-installer'

inputs: 
  
  token:
    description: 'A Github PAT'
    required: true
  
  app_name:
    required: true
    type: string
      
  build:
    required: true
    type: string

  extraResources:
    required: false
    type: string

  openssl-version:
    required: false
    default: '3.1.0'
    type: string

  openssl-prefix:
    required: false
    type: string

  openssl-dir:
    required: false
    type: string

  openssl-bin:
    required: false
    type: string

  firmware-release-zip:
    required: false
    type: string

  firmware-release-sig:
    required: false
    type: string

  firmware-release-pem:
    required: false
    type: string

  zip-file:
    required: false
    type: string

  sig-file:
    required: false
    type: string

  pem-file:
    required: false
    type: string

runs:
  using: 'composite'
    
  steps:

    - name: Restore cache build (Linux)
      if: ${{ runner.os == 'Linux' }}
      id: restore-cache-build-linux
      uses: actions/cache/restore@v3 
      with:
        path: |
          dist_electron/${{ inputs.app_name }}.${{ inputs.build }} 
          dist_electron/${{ inputs.app_name }}.${{ inputs.build }}.sha256sum.txt
          dist_electron/linux-unpacked
        key: ${{ runner.os }}-build-${{ hashFiles('src/**', 'public/**', 'vue.config.js') }} 

    - name: Restore cache build (Windows)
      if: ${{ runner.os == 'Windows' }}
      id: restore-cache-build-win
      uses: actions/cache/restore@v3 
      with:
        path: |
          dist_electron/${{ inputs.app_name }}.exe 
          dist_electron/${{ inputs.app_name }}.exe.sha256sum.txt
          dist_electron/win-unpacked
        key: ${{ runner.os }}-build-${{ hashFiles('src/**', 'public/**', 'vue.config.js') }}

    - name: Restore extraResources (openssl for Windows)
      if: ${{ runner.os == 'Windows' }}
      id: restore-cache-extra 
      uses: actions/cache/restore@v3 
      with:
        path: ${{ inputs.extraResources }}
        key: ${{ runner.os }}-extra-${{ hashFiles(inputs.extraResources) }}

    - name: Create extraResources directory if not exists (openssl for Windows)
      if: ${{ runner.os == 'Windows' && steps.restore-cache-extra.outputs.cache-hit != 'true' }}
      shell: pwsh
      run: |
        $exists=Test-Path -Path ${{ inputs.extraResources }}
        if(!$exists) { \
          New-Item -ItemType directory -Path ${{ inputs.extraResources }} \
        }

    - name: Configure, build, test and install (openssl for Windows)  
      if: ${{ runner.os == 'Windows' && steps.restore-cache-extra.outputs.cache-hit != 'true' }}
      uses: qlrd/compile-openssl-windows-action@v0.0.2
      with:
        build-type: 'plain'
        version: openssl-${{ inputs.openssl-version }}
        prefix: ${{ inputs.openssl-prefix }}
        openssldir: ${{ inputs.openssl-dir }}

    - name: Download krux's release firmware zip file for pre-test (openssl for Windows)
      if: ${{ runner.os == 'Windows' && steps.restore-cache-extra.outputs.cache-hit != 'true' }}
      shell: cmd
      run: curl.exe -L ${{ inputs.firmware-release-zip }} -o ${{ inputs.zip-file }}
    
    - name: Download krux's release firmware signature file for pre-test (openssl for Windows)
      if: ${{ runner.os == 'Windows' && steps.restore-cache-extra.outputs.cache-hit != 'true' }}
      shell: cmd
      run: curl.exe -L ${{ inputs.firmware-release-sig }} -o ${{ inputs.sig-file }}

    - name: Download selfcustody's public key certificate for pre-test (openssl for Windows)
      if: ${{ runner.os == 'Windows' && steps.restore-cache-extra.outputs.cache-hit != 'true' }}
      shell: cmd
      run: |
        curl.exe -L -H "Accept-Charset: utf-8" ${{ inputs.firmware-release-pem }} -o ${{ inputs.pem-file }}

    - name: Pre-test built-in openssl  (Windows)
      if: ${{ runner.os == 'Windows' && steps.restore-cache-extra.outputs.cache-hit != 'true' }}
      shell: cmd 
      run: >
        ${{ inputs.openssl-prefix }}${{ inputs.openssl-bin }} sha256 <${{ inputs.zip-file }} -binary | 
        ${{ inputs.openssl-prefix }}${{ inputs.openssl-bin }} pkeyutl -verify -pubin
        -inkey ${{ inputs.pem-file }}
        -sigfile ${{ inputs.sig-file }}
   
    - name: Save cached built-in openssl (Windows)
      if: ${{ runner.os == 'Windows' && steps.restore-cache-extra.outputs.cache-hit != 'true' }}
      uses: actions/cache/save@v3  
      with:
        path: ${{ inputs.extraResources }}
        key: ${{ runner.os }}-extra-${{ hashFiles(inputs.extraResources) }}

    - name: Build electron app (Linux)
      if: ${{ runner.os == 'Linux' && steps.cache-restore-build-linux.outputs.cache-hit != 'true' }}
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.token }}
      run: yarn run build ${{ inputs.build }}

    - name: Build electron app (Windows)
      if: ${{ runner.os == 'Windows' && steps.cache-restore-build-win.outputs.cache-hit != 'true' }}
      shell: pwsh
      env:
        GH_TOKEN: ${{ inputs.token }}
      run: yarn run build ${{ inputs.build }}

    - name: Hash electron app (Linux)
      if: ${{ runner.os == 'Linux' && steps.cache-restore-build-linux.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        HASH=${{ hashFiles(format('dist_electron/{0}.{1}', inputs.app_name, inputs.build)) }} 
        echo "$HASH ${{ inputs.app_name }}.${{ inputs.build }}" >> dist_electron/${{ inputs.app_name }}.${{ inputs.build }}.sha256sum.txt
        echo "app_hash=$HASH" >> $GITHUB_OUTPUT

    - name: Hash electron app (Windows)
      if: ${{ runner.os == 'Windows' && steps.cache-restore-build-win.outputs.cache-hit != 'true' }}
      shell: pwsh
      run: |
        $hash=${{ hashFiles(format('dist_electron/{0}.exe', inputs.app_name)) }}
        Write-Output "$hash ${{ inputs.app_name }}.exe" | Out-File -FilePath dist_electron/${{ inputs.app_name }}.exe.sha256sum.txt -Encoding utf8 -Append
        Write-Output "app_hash=$hash" | Out-File -FilePath $Env:GITHUB_OUTPUT

    - name: List dist_electron files (Linux)
      if: ${{ runner.os == 'Linux' }}
      shell: bash
      run: ls dist_electron

    - name: List dist_electron files (Windows)
      if: ${{ runner.os == 'Windows' }}
      shell: pwsh
      run: ls dist_electron

    - name: Save cache build (Linux)
      if: ${{ runner.os == 'Linux' && steps.cache-restore-build-linux.outputs.cache-hit != 'true' }}
      uses: actions/cache/save@v3  
      with:
        path: |
          dist_electron/${{ inputs.app_name }}.${{ inputs.build }} 
          dist_electron/${{ inputs.app_name }}.${{ inputs.build }}.sha256sum.txt
          dist_electron/linux-unpacked
        key: ${{ runner.os }}-build-${{ hashFiles('src/**', 'public/**', 'vue.config.js') }}

    - name: Save cache build (Windows)
      if: ${{ runner.os == 'Windows' && steps.cache-restore-build-win.outputs.cache-hit != 'true' }}
      uses: actions/cache/save@v3  
      with:
        path: |
          dist_electron/${{ inputs.app_name }}.exe 
          dist_electron/${{ inputs.app_name }}.exe.sha256sum.txt
          dist_electron/win-unpacked
        key: ${{ runner.os }}-build-${{ hashFiles('src/**', 'public/**', 'vue.config.js') }}
